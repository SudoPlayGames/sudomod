// https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

sourceCompatibility = 1.8

group = 'com.sudoplay.sudoxt'
version = new File("${project.projectDir}/project.version").text
archivesBaseName = 'sudoxt'

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    api {
        java {
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath

            srcDir file('src/api/java/')
        }
    }
    testIntegration {
        java {
            compileClasspath += sourceSets.test.runtimeClasspath
            compileClasspath += sourceSets.api.runtimeClasspath

            runtimeClasspath += sourceSets.test.runtimeClasspath
            runtimeClasspath += sourceSets.api.runtimeClasspath

            srcDir file('src/test-integration/java')
        }
        resources.srcDir file('src/test-integration/resources')
    }
    modA {
        java {
            srcDir file('mods/mod-a')
        }
    }
    modB {
        java {
            srcDir file('mods/mod-b')
        }
    }
    modC {
        java {
            srcDir file('mods/mod-c')
        }
    }
    modD {
        java {
            srcDir file('mods/mod-d')
        }
    }
    // skip compressed e
    modF {
        java {
            srcDir file('mods-other/mod-f')
        }
    }
}

configurations {
    testCompile {
        exclude module: 'share'
    }
    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime
    modA
    modB
    modC
    modD
}

dependencies {

    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-ext:1.7.7'

    compile files('libs/janino-3.0.6-patch.jar')
    compile 'org.codehaus.janino:commons-compiler:3.0.6'
    compile 'org.ow2.asm:asm-all:5.2'
    compile 'org.jetbrains:annotations:15.0'

    modACompile sourceSets.api.output
    modACompile files('mods/mod-a/sudomath.jar')

    modBCompile sourceSets.api.output
    modBCompile sourceSets.modA.output
    modBCompile files('mods/mod-a/sudomath.jar')

    modCCompile sourceSets.api.output
    modCCompile sourceSets.modB.output

    modDCompile sourceSets.api.output
    modDCompile sourceSets.modA.output
    modDCompile files('mods/mod-a/sudomath.jar')
    modDCompile sourceSets.modB.output

    modFCompile sourceSets.api.output
    modFCompile sourceSets.modA.output

    testCompile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'ch.qos.logback:logback-core:1.1.2'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:2+'
    testIntegrationCompile 'org.assertj:assertj-core:3.6.2'
    testIntegrationCompile 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
}

task testIntegration(type: Test) {
    testClassesDir = sourceSets.testIntegration.output.classesDir
    classpath = sourceSets.testIntegration.runtimeClasspath
    outputs.upToDateWhen { false }
}

test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

check.dependsOn testIntegration
testIntegration.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

def isReleaseBuild() {
    return project.version.contains("SNAPSHOT") == false;
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

//noinspection GroovyAssignabilityCheck
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = project.group
            pom.artifactId = project.archivesBaseName
            pom.version = project.version

            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENSE_NAME
                        url POM_LICENSE_URL
                    }
                }

                developers {
                    developer {
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                        organization POM_DEVELOPER_ORGANIZATION
                        organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                    }
                }
            }
        }
    }
}