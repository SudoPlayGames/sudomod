http://misko.hevery.com/code-reviewers-guide/

Naming Conventions:
  * Extension - a group of plugins, like a 'mod'
  * Plugin - an abstract class in the API, extended by a class in the extension
  * API - an interface implemented by the system and provided to a plugin

Test:
  ✔ Setup for integration tests @done (17-02-24 13:31)
  ✔ Test that the recursive delete helper doesn't follow symlinks @done (17-03-04 11:19)
    According to the source of Files.walkFileTree: "In other words, it does not follow symbolic links, and visits all levels of the file tree."
  ✔ Test that extension can't have dependency on itself @done (17-03-04 11:04)
  ✔ Class can implement or extend non-whitelisted class...? @done (17-03-09 09:40)
    Fixed by checking class superclass and implemented interfaces against the same class filters used in the method visitor.
    Unit:
      ☐ Multiple mod paths should work as intended
    Integration:
      ☐ Compressed mod should work as intended
      ✔ Mod compiled as jar should work as intended @done (17-03-14 11:17)
      ✔ Can a compiled mod jar use code that depends on uncompiled source? Yes. @done (17-03-14 11:17)
      ✔ Can a compiled mod jar use code that depends on uncompiled source in dependency? Yes. @done (17-03-14 12:08)
      ✔ Can a compiled mod jar use code that depends on compiled mod jar code? Yes. @done (17-03-14 12:08)
      ✔ Can a compiled mod jar use code that depends on compiled mod jar code in dependency? Yes. @done (17-03-14 12:08)

Bugs:
  ✔ Source classloader can't be made parent-last @done (17-03-11 11:54)
    The loadIClass method in abstract class IClassLoader is final and controls the parent-first behavior.
    Fix: I've solved this by replacing the IClassLoader in the janino jar file with my own IClassLoader.
  ✔ Loading a plugin from a jar file that has a static reference to LoggingAPI fails with ACE. @done (17-03-14 11:06)
    LoggingAPI has the InterceptClass annotation that flags it for intercept. The InterceptClassloader will use getResourceAsStream() which fails when the security context does not give permission to read the requested file. When loading a source java file through the source bit of the classloader, the static reference to LoggingAPI causes the SXJavaSourceIClassLoader to load the LoggingAPI class without the no-permission restriction of classes loaded with an ISandboxClassloader implementation. This is why source files with a static LoggingAPI reference do not fail the security check. However, when loading a pre-compiled class file from the jar, the static reference is processed later, when the loaded class file is initialized. This means that when the LoggingAPI class is intercepted and getResourceAsStream() is called, the security check will fail because the no-permission restriction from the classloader that loaded the pre-compiled class, an ISandboxClassloader implementation, will be in the security context. Wrapping the call to getResourceAsStream() in a privileged block will fix this.

Meta:
  ✔ Should we switch to a more mature json lib that allows comments? @done (17-02-26 12:15)
    ie. https://github.com/stleary/JSON-java
    Switched to a modified version of the above found in Google's Android. Licensed under Apache 2.
  ✔ Rename meta parsers to adapters; also rename variable names in tests @done (17-03-04 11:19)
  ✔ Registered plugins @done (17-03-04 15:49)
    Optionally allow extensions to register plugins with a name. These plugins can later be retrieved by the system developer; ie. retrieving all 'main-plugin' from each extension which would act as an entry point.
  ✔ Overrides @done (17-03-11 12:54)
  ✔ Preload @done (17-03-06 13:29)
  ✔ Should registered plugins also be preloaded? @done (17-03-15 08:31)
    Yes. A config option has been added.

Security:
  ✔ Should we attempt bytecode transformation to further sandbox the plugin code? Yes. @done (17-03-03 15:25)
    http://www.java-gaming.org/index.php?;topic=31183.0
    https://github.com/lihaoyi/6858
  ✔ Finish class byte usage in budget callback delegate @done (17-03-05 14:56)

File Access:
  ✔ Sandbox mod file access into the data folder @done (17-03-09 09:41)
    Should grant extensions read-only access to certain files in the mod's home folder: json, csv (any others?).
    Should grant the mod read/write access to a NBT data file in the data folder, albeit via API.
  ✔ Json api wrapper @done (17-03-12 19:44)

Configuration:
  ✔ Provide simple configuration file framework @done (17-03-12 19:44)
    We're going to go with json. Using the modified org.json classes, json config files can support comments.
    Where should the config files be stored?
      We'll do a read-only json file access api targeted at the containers path. Mods can ship with a config file that can be edited by the end-user.
  ✔ Move "mod-plugin" @done (17-02-24 11:34)
    A mod-plugin is simply an extension of plugin and should be treated as such.
  ✔ Split Config and builder into (SEConfig / SEConfigBuilder) and SEServiceBuilder @done (17-02-24 11:34)
    Set values in the config and component objects in the service builder
  ✔ Pass SEConfig into the SEService and pass values down into subsequent methods @done (17-02-24 11:33)
    Fixed with the two-stage builder process, one builder for the config and one builder for the service
  ✔ Add single remove methods to remove listed defaults by class @done (17-02-24 11:33)
  ✔ Change remove default methods to say removeAll... @done (17-02-24 11:33)
  ✔ Add multiple path option to config @done (17-03-14 07:52)
    This will require an IPathlistProvider that can handle multiple paths and an alteration to the Config and ConfigBuilder to allow setting mutliple candidate search paths. Adding this feature will let the end-user specify more than one mod path in the launcher config, making it easier to develop mods in different paths.

Events:
  ✔ Provide a self-contained, service level event system: @done (17-03-09 09:41)
    Do we even need events? Not going to implement this.