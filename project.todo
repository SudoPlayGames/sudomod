Naming Conventions:
  * Extension - a group of plugins, like a 'mod'
  * Plugin - an abstract class in the API, extended by a class in the extension
  * API - an interface implemented by the system and provided to a plugin

Test:
  ✔ Setup for integration tests @done (17-02-24 13:31)
  ✔ Test that the recursive delete helper doesn't follow symlinks @done (17-03-04 11:19)
    According to the source of Files.walkFileTree: "In other words, it does not follow symbolic links, and visits all levels of the file tree."
  ✔ Test that extension can't have dependency on itself @done (17-03-04 11:04)
  ☐ Class can implement non-whitelisted class...?

Meta:
  ✔ Should we switch to a more mature json lib that allows comments? @done (17-02-26 12:15)
    ie. https://github.com/stleary/JSON-java
    Switched to a modified version of the above found in Google's Android. Licensed under Apache 2.
  ✔ Rename meta parsers to adapters; also rename variable names in tests @done (17-03-04 11:19)
  ✔ Registered plugins @done (17-03-04 15:49)
    Optionally allow extensions to register plugins with a name. These plugins can later be retrieved by the system developer; ie. retrieving all 'main-plugin' from each extension which would act as an entry point.
  ☐ Overrides
  ✔ Preload @done (17-03-06 13:29)

Security:
  ✔ Should we attempt bytecode transformation to further sandbox the plugin code? Yes. @done (17-03-03 15:25)
    http://www.java-gaming.org/index.php?;topic=31183.0
    https://github.com/lihaoyi/6858
  ✔ Finish class byte usage in budget callback delegate @done (17-03-05 14:56)

File Access:
  ☐ Sandbox mod file access into the data folder
    Should grant extensions read-only access to certain files in the mod's home folder: json, csv (any others?).
    Should grant the mod read/write access to a NBT data file in the data folder, albeit via API.

Configuration:
  ☐ Provide simple configuration file framework
    We're going to go with json. Using the modified org.json classes, json config files can support comments.
    Where should the config files be stored?
      We'll do a read-only json file access api targeted at the containers path. Mods can ship with a config file that can be edited by the end-user.
  ✔ Move "mod-plugin" @done (17-02-24 11:34)
    A mod-plugin is simply an extension of plugin and should be treated as such.
  ✔ Split Config and builder into (SEConfig / SEConfigBuilder) and SEServiceBuilder @done (17-02-24 11:34)
    Set values in the config and component objects in the service builder
  ✔ Pass SEConfig into the SEService and pass values down into subsequent methods @done (17-02-24 11:33)
    Fixed with the two-stage builder process, one builder for the config and one builder for the service
  ✔ Add single remove methods to remove listed defaults by class @done (17-02-24 11:33)
  ✔ Change remove default methods to say removeAll... @done (17-02-24 11:33)

Events:
  ☐ Provide a self-contained, service level event system:
    Do we even need events?